@startuml
class Controller.MainPageController {
- ObservableList<Task> allTasks
+ {static} MainPageController instance
+ {static} MainPageController getInstance()
+ void startApp()
+ void addTask(String,LocalDate,LocalDate,String)
+ void removeTask(int)
+ ObservableList<Task> filterTasks(LocalDate,String)
+ void fetchTasksData()
+ void storeTasksData()
+ void setAllTasks(ObservableList<Task>)
+ ObservableList<Task> getAllTasks()
}
class utils.Goto {
- {static} RootPane rootPane
+ {static} void setRootPane(RootPane)
+ {static} void clear()
+ {static} void homePage()
+ {static} void mainPage()
+ {static} Button BarButton(String,int,Color,Color,int)
+ {static} void onHoverButton(Button,Color,Color,Color,Color)
}
class Task.MustDoTask {
+ <<Create>> MustDoTask(String,LocalDate)
+ void doTask()
}
class pane.HomePane {
+ <<Create>> HomePane()
}
class pane.MainPane {
+ <<Create>> MainPane()
}
class pane.RootPane {
+ <<Create>> RootPane()
}
class Application.Application {
+ {static} void main(String[])
+ void start(Stage)
}
class Task.RecurringTask {
- LocalDate startDate
+ <<Create>> RecurringTask(String,LocalDate,LocalDate)
+ LocalDate getStartDate()
+ void doTask()
+ String toString()
}
class Task.SideTask {
+ <<Create>> SideTask(String,LocalDate)
+ void doTask()
}
abstract class Task.Task {
# String description
# LocalDate deadline
# String type
+ <<Create>> Task(String,LocalDate,String)
+ String getDescription()
+ void setDescription(String)
+ LocalDate getDeadline()
+ void setDeadline(LocalDate)
+ String getType()
+ void setType(String)
+ {abstract}void doTask()
+ String toString()
}


Task.Task <|-- Task.MustDoTask
javafx.scene.layout.VBox <|-- pane.HomePane
javafx.scene.layout.VBox <|-- pane.MainPane
javafx.scene.layout.VBox <|-- pane.RootPane
Application.Application <|-- Application.Application
Task.Task <|-- Task.RecurringTask
Task.Task <|-- Task.SideTask
@enduml